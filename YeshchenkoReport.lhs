Єщенко Микола КНІТ 3 курс 1 група
Доповідь на тему: Функції вищого порядку
___________________________________________________________________________

Підтема 1. Застосування функцій за допомогою оператора $.
Знак $ у Haskell - це аплікатор функцій. На відміну від функцій, він має найменший пріоритет і застосовує функції правоасоціативно, та визначається так:

> --($) :: (a –> b) –> a –> b
> --f $ x = f x

Перевагами оператора є зменшення кількості дужок та покращення читабельності коду.

Задача 1. Порахувати суму чисел від 2 до 10, які дають більше 10 при множенні на 2.

> f1 = sum $ filter (> 10) $ map (*2) [2..10]
> -- те саме, що: f1 = sum (filter (> 10) (map (*2) [2..10]))
> -- 80

Задача 2. Застосувати 3 до кожного елемента масиву.

> f2 :: [Double]
> f2 = map ($ 3) [(4.0+), (10.0*), sqrt]

Підтема 2. Композиції функцій.

Оператор (.) дозволяє утворювати композиції функцій та визначається таким чином:

> --(.) :: (b –> c) –> (a –> b) –> a –> c
> --f . g = \x –> f (g x)

За деклараціює зовнішня ф-я має приймати параметр того типу, який повертає внутрішня.
Один із варіантів застосування - заміна анонімних функцій більш зрозумілим та лаконічним кодом.

Задача 3. Зробити усі числа списку від'ємними.

> f3 = map (negate . abs) [5, 3, 6, 7, 2, 19, 24]
> --f3 = map (negate . sum . tail) [[1..5],[3..6],[1..7]]
> -- те саме, що: map (\x –> negate (abs x)) [5,–3,–6,7,–3,2,–19,24]

Також можлива композиція функцій з декількома аргументами.

Задача 4. Додати 5 разів найбільше з двох число.

> f4 = sum . replicate 5 $ max 6.7 8.9

Існує безкрапкова нотація, яка є зручною, але інколи менш читабельною.

Задача 5. Взяти макс. число з двох (1 - передається користувачем), косинус, тангенс, від'ємне та найближче більше ціле від результату.

> f5 = ceiling . negate . tan . cos . max 50
> -- те саме, що:
> --fn x = ceiling (negate (tan (cos (max 50 x))))
